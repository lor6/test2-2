// Generated by jextract

package foreign.c;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _iobuf {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("_ptr"),
        Constants$root.C_LONG$LAYOUT.withName("_cnt"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("_base"),
        Constants$root.C_LONG$LAYOUT.withName("_flag"),
        Constants$root.C_LONG$LAYOUT.withName("_file"),
        Constants$root.C_LONG$LAYOUT.withName("_charbuf"),
        Constants$root.C_LONG$LAYOUT.withName("_bufsiz"),
        Constants$root.C_POINTER$LAYOUT.withName("_tmpfname")
    ).withName("_iobuf");
    public static MemoryLayout $LAYOUT() {
        return _iobuf.$struct$LAYOUT;
    }
    static final VarHandle _ptr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_ptr"));
    public static VarHandle _ptr$VH() {
        return _iobuf._ptr$VH;
    }
    public static MemoryAddress _ptr$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_iobuf._ptr$VH.get(seg);
    }
    public static void _ptr$set( MemorySegment seg, MemoryAddress x) {
        _iobuf._ptr$VH.set(seg, x);
    }
    public static MemoryAddress _ptr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_iobuf._ptr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _ptr$set(MemorySegment seg, long index, MemoryAddress x) {
        _iobuf._ptr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _cnt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_cnt"));
    public static VarHandle _cnt$VH() {
        return _iobuf._cnt$VH;
    }
    public static int _cnt$get(MemorySegment seg) {
        return (int)_iobuf._cnt$VH.get(seg);
    }
    public static void _cnt$set( MemorySegment seg, int x) {
        _iobuf._cnt$VH.set(seg, x);
    }
    public static int _cnt$get(MemorySegment seg, long index) {
        return (int)_iobuf._cnt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _cnt$set(MemorySegment seg, long index, int x) {
        _iobuf._cnt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _base$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_base"));
    public static VarHandle _base$VH() {
        return _iobuf._base$VH;
    }
    public static MemoryAddress _base$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_iobuf._base$VH.get(seg);
    }
    public static void _base$set( MemorySegment seg, MemoryAddress x) {
        _iobuf._base$VH.set(seg, x);
    }
    public static MemoryAddress _base$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_iobuf._base$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _base$set(MemorySegment seg, long index, MemoryAddress x) {
        _iobuf._base$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _flag$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_flag"));
    public static VarHandle _flag$VH() {
        return _iobuf._flag$VH;
    }
    public static int _flag$get(MemorySegment seg) {
        return (int)_iobuf._flag$VH.get(seg);
    }
    public static void _flag$set( MemorySegment seg, int x) {
        _iobuf._flag$VH.set(seg, x);
    }
    public static int _flag$get(MemorySegment seg, long index) {
        return (int)_iobuf._flag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _flag$set(MemorySegment seg, long index, int x) {
        _iobuf._flag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _file$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_file"));
    public static VarHandle _file$VH() {
        return _iobuf._file$VH;
    }
    public static int _file$get(MemorySegment seg) {
        return (int)_iobuf._file$VH.get(seg);
    }
    public static void _file$set( MemorySegment seg, int x) {
        _iobuf._file$VH.set(seg, x);
    }
    public static int _file$get(MemorySegment seg, long index) {
        return (int)_iobuf._file$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _file$set(MemorySegment seg, long index, int x) {
        _iobuf._file$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _charbuf$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_charbuf"));
    public static VarHandle _charbuf$VH() {
        return _iobuf._charbuf$VH;
    }
    public static int _charbuf$get(MemorySegment seg) {
        return (int)_iobuf._charbuf$VH.get(seg);
    }
    public static void _charbuf$set( MemorySegment seg, int x) {
        _iobuf._charbuf$VH.set(seg, x);
    }
    public static int _charbuf$get(MemorySegment seg, long index) {
        return (int)_iobuf._charbuf$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _charbuf$set(MemorySegment seg, long index, int x) {
        _iobuf._charbuf$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _bufsiz$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_bufsiz"));
    public static VarHandle _bufsiz$VH() {
        return _iobuf._bufsiz$VH;
    }
    public static int _bufsiz$get(MemorySegment seg) {
        return (int)_iobuf._bufsiz$VH.get(seg);
    }
    public static void _bufsiz$set( MemorySegment seg, int x) {
        _iobuf._bufsiz$VH.set(seg, x);
    }
    public static int _bufsiz$get(MemorySegment seg, long index) {
        return (int)_iobuf._bufsiz$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _bufsiz$set(MemorySegment seg, long index, int x) {
        _iobuf._bufsiz$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _tmpfname$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_tmpfname"));
    public static VarHandle _tmpfname$VH() {
        return _iobuf._tmpfname$VH;
    }
    public static MemoryAddress _tmpfname$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_iobuf._tmpfname$VH.get(seg);
    }
    public static void _tmpfname$set( MemorySegment seg, MemoryAddress x) {
        _iobuf._tmpfname$VH.set(seg, x);
    }
    public static MemoryAddress _tmpfname$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_iobuf._tmpfname$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _tmpfname$set(MemorySegment seg, long index, MemoryAddress x) {
        _iobuf._tmpfname$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


