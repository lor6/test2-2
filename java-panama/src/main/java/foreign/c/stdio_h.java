// Generated by jextract

package foreign.c;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class stdio_h  {

    /* package-private */ stdio_h() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_LONG$LAYOUT;
    public static OfInt C_LONG = Constants$root.C_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int __MINGW32_MAJOR_VERSION() {
        return (int)5L;
    }
    public static int __MINGW32_MINOR_VERSION() {
        return (int)0L;
    }
    public static int __MINGW32_PATCHLEVEL() {
        return (int)2L;
    }
    public static int __MSVCR60_DLL() {
        return (int)1536L;
    }
    public static int __MSVCR61_DLL() {
        return (int)1537L;
    }
    public static int __MSVCR70_DLL() {
        return (int)1792L;
    }
    public static int __MSVCR71_DLL() {
        return (int)1793L;
    }
    public static int __MSVCR80_DLL() {
        return (int)2048L;
    }
    public static int __MSVCR90_DLL() {
        return (int)2304L;
    }
    public static int __MSVCR100_DLL() {
        return (int)4096L;
    }
    public static int __MSVCR110_DLL() {
        return (int)4352L;
    }
    public static int __MSVCR120_DLL() {
        return (int)4608L;
    }
    public static int __W32API_MAJOR_VERSION() {
        return (int)5L;
    }
    public static int __W32API_MINOR_VERSION() {
        return (int)0L;
    }
    public static int __W32API_PATCHLEVEL() {
        return (int)2L;
    }
    public static int SPVERSION_MASK() {
        return (int)65280L;
    }
    public static int SUBVERSION_MASK() {
        return (int)255L;
    }
    public static int _WIN32_WINNT_NT4() {
        return (int)1024L;
    }
    public static int _WIN32_WINNT_NT4E() {
        return (int)1025L;
    }
    public static int _WIN32_WINNT_NT4SP3() {
        return (int)1027L;
    }
    public static int _WIN32_WINDOWS_95() {
        return (int)1024L;
    }
    public static int _WIN32_WINDOWS_98() {
        return (int)1040L;
    }
    public static int _WIN32_WINDOWS_ME() {
        return (int)1168L;
    }
    public static int _WIN32_WINNT_WIN2K() {
        return (int)1280L;
    }
    public static int _WIN32_WINNT_WINXP() {
        return (int)1281L;
    }
    public static int _WIN32_WINNT_WS03() {
        return (int)1282L;
    }
    public static int _WIN32_WINNT_WIN6() {
        return (int)1536L;
    }
    public static int _WIN32_WINNT_VISTA() {
        return (int)1536L;
    }
    public static int _WIN32_WINNT_WS08() {
        return (int)1536L;
    }
    public static int _WIN32_WINNT_LONGHORN() {
        return (int)1536L;
    }
    public static int _WIN32_WINNT_WIN7() {
        return (int)1537L;
    }
    public static int _WIN32_WINNT_WIN8() {
        return (int)1538L;
    }
    public static int _WIN32_WINNT_WINBLUE() {
        return (int)1539L;
    }
    public static int _WIN32_IE_IE50() {
        return (int)1280L;
    }
    public static int _WIN32_IE_IE501() {
        return (int)1281L;
    }
    public static int _WIN32_IE_IE55() {
        return (int)1360L;
    }
    public static int _WIN32_IE_IE56() {
        return (int)1376L;
    }
    public static int _WIN32_IE_IE60() {
        return (int)1536L;
    }
    public static int _WIN32_IE_IE60SP1() {
        return (int)1537L;
    }
    public static int _WIN32_IE_IE60SP2() {
        return (int)1539L;
    }
    public static int _WIN32_IE_IE70() {
        return (int)1792L;
    }
    public static int _WIN32_IE_IE80() {
        return (int)2048L;
    }
    public static int _WIN32_IE_IE30() {
        return (int)768L;
    }
    public static int _WIN32_IE_IE301() {
        return (int)769L;
    }
    public static int _WIN32_IE_IE302() {
        return (int)770L;
    }
    public static int _WIN32_IE_IE40() {
        return (int)1024L;
    }
    public static int _WIN32_IE_IE401() {
        return (int)1025L;
    }
    public static int __NTDDI_WIN5() {
        return (int)83886080L;
    }
    public static int __NTDDI_WIN51() {
        return (int)83951616L;
    }
    public static int __NTDDI_WIN52() {
        return (int)84017152L;
    }
    public static int __NTDDI_WIN6() {
        return (int)100663296L;
    }
    public static int __NTDDI_WIN61() {
        return (int)100728832L;
    }
    public static int __NTDDI_WIN62() {
        return (int)100794368L;
    }
    public static int __NTDDI_WIN63() {
        return (int)100859904L;
    }
    public static int __NTDDI_SP0() {
        return (int)0L;
    }
    public static int __NTDDI_SP1() {
        return (int)256L;
    }
    public static int __NTDDI_SP2() {
        return (int)512L;
    }
    public static int __NTDDI_SP3() {
        return (int)768L;
    }
    public static int __NTDDI_SP4() {
        return (int)1024L;
    }
    public static int __CRT_GLOB_USE_MSVCRT__() {
        return (int)1L;
    }
    public static int __CRT_GLOB_USE_MINGW__() {
        return (int)2L;
    }
    public static int __CRT_GLOB_USE_SINGLE_QUOTE__() {
        return (int)16L;
    }
    public static int __CRT_GLOB_BRACKET_GROUPS__() {
        return (int)32L;
    }
    public static int _EMULATE_GLIBC() {
        return (int)1L;
    }
    public static int _ISOC99_SOURCE() {
        return (int)7L;
    }
    public static int _MINGW32_SOURCE_EXTENDED() {
        return (int)1L;
    }
    public static int _IOREAD() {
        return (int)1L;
    }
    public static int _IOWRT() {
        return (int)2L;
    }
    public static int _IORW() {
        return (int)128L;
    }
    public static int STDIN_FILENO() {
        return (int)0L;
    }
    public static int STDOUT_FILENO() {
        return (int)1L;
    }
    public static int STDERR_FILENO() {
        return (int)2L;
    }
    public static int TMP_MAX() {
        return (int)32767L;
    }
    public static int _IOFBF() {
        return (int)0L;
    }
    public static int _IOLBF() {
        return (int)64L;
    }
    public static int _IONBF() {
        return (int)4L;
    }
    public static int _IOMYBUF() {
        return (int)8L;
    }
    public static int _IOEOF() {
        return (int)16L;
    }
    public static int _IOERR() {
        return (int)32L;
    }
    public static int _IOSTRG() {
        return (int)64L;
    }
    public static int BUFSIZ() {
        return (int)512L;
    }
    public static int SEEK_SET() {
        return (int)0L;
    }
    public static int SEEK_CUR() {
        return (int)1L;
    }
    public static int SEEK_END() {
        return (int)2L;
    }
    public static int _TWO_DIGIT_EXPONENT() {
        return (int)1L;
    }
    public static int _THREE_DIGIT_EXPONENT() {
        return (int)0L;
    }
    public static int __USE_MINGW_PRINTF() {
        return (int)0L;
    }
    public static OfInt __off32_t = Constants$root.C_LONG$LAYOUT;
    public static OfInt _off_t = Constants$root.C_LONG$LAYOUT;
    public static OfInt off_t = Constants$root.C_LONG$LAYOUT;
    public static OfInt _ssize_t = Constants$root.C_LONG$LAYOUT;
    public static OfInt ssize_t = Constants$root.C_LONG$LAYOUT;
    public static MethodHandle fopen$MH() {
        return RuntimeHelper.requireNonNull(constants$0.fopen$MH,"fopen");
    }
    public static MemoryAddress fopen ( Addressable x0,  Addressable x1) {
        var mh$ = fopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle freopen$MH() {
        return RuntimeHelper.requireNonNull(constants$0.freopen$MH,"freopen");
    }
    public static MemoryAddress freopen ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = freopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush$MH() {
        return RuntimeHelper.requireNonNull(constants$0.fflush$MH,"fflush");
    }
    public static int fflush ( Addressable x0) {
        var mh$ = fflush$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fclose$MH() {
        return RuntimeHelper.requireNonNull(constants$0.fclose$MH,"fclose");
    }
    public static int fclose ( Addressable x0) {
        var mh$ = fclose$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remove$MH() {
        return RuntimeHelper.requireNonNull(constants$0.remove$MH,"remove");
    }
    public static int remove ( Addressable x0) {
        var mh$ = remove$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rename$MH() {
        return RuntimeHelper.requireNonNull(constants$1.rename$MH,"rename");
    }
    public static int rename ( Addressable x0,  Addressable x1) {
        var mh$ = rename$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpfile$MH() {
        return RuntimeHelper.requireNonNull(constants$1.tmpfile$MH,"tmpfile");
    }
    public static MemoryAddress tmpfile () {
        var mh$ = tmpfile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam$MH() {
        return RuntimeHelper.requireNonNull(constants$1.tmpnam$MH,"tmpnam");
    }
    public static MemoryAddress tmpnam ( Addressable x0) {
        var mh$ = tmpnam$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _tempnam$MH() {
        return RuntimeHelper.requireNonNull(constants$1._tempnam$MH,"_tempnam");
    }
    public static MemoryAddress _tempnam ( Addressable x0,  Addressable x1) {
        var mh$ = _tempnam$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rmtmp$MH() {
        return RuntimeHelper.requireNonNull(constants$1._rmtmp$MH,"_rmtmp");
    }
    public static int _rmtmp () {
        var mh$ = _rmtmp$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _unlink$MH() {
        return RuntimeHelper.requireNonNull(constants$1._unlink$MH,"_unlink");
    }
    public static int _unlink ( Addressable x0) {
        var mh$ = _unlink$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tempnam$MH() {
        return RuntimeHelper.requireNonNull(constants$2.tempnam$MH,"tempnam");
    }
    public static MemoryAddress tempnam ( Addressable x0,  Addressable x1) {
        var mh$ = tempnam$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rmtmp$MH() {
        return RuntimeHelper.requireNonNull(constants$2.rmtmp$MH,"rmtmp");
    }
    public static int rmtmp () {
        var mh$ = rmtmp$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unlink$MH() {
        return RuntimeHelper.requireNonNull(constants$2.unlink$MH,"unlink");
    }
    public static int unlink ( Addressable x0) {
        var mh$ = unlink$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setvbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$2.setvbuf$MH,"setvbuf");
    }
    public static int setvbuf ( Addressable x0,  Addressable x1,  int x2,  long x3) {
        var mh$ = setvbuf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$2.setbuf$MH,"setbuf");
    }
    public static void setbuf ( Addressable x0,  Addressable x1) {
        var mh$ = setbuf$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __mingw_fprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$2.__mingw_fprintf$MH,"__mingw_fprintf");
    }
    public static int __mingw_fprintf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = __mingw_fprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __mingw_printf$MH() {
        return RuntimeHelper.requireNonNull(constants$3.__mingw_printf$MH,"__mingw_printf");
    }
    public static int __mingw_printf ( Addressable x0, Object... x1) {
        var mh$ = __mingw_printf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __mingw_sprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$3.__mingw_sprintf$MH,"__mingw_sprintf");
    }
    public static int __mingw_sprintf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = __mingw_sprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __mingw_snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$3.__mingw_snprintf$MH,"__mingw_snprintf");
    }
    public static int __mingw_snprintf ( Addressable x0,  long x1,  Addressable x2, Object... x3) {
        var mh$ = __mingw_snprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __mingw_vfprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$3.__mingw_vfprintf$MH,"__mingw_vfprintf");
    }
    public static int __mingw_vfprintf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = __mingw_vfprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __mingw_vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$3.__mingw_vprintf$MH,"__mingw_vprintf");
    }
    public static int __mingw_vprintf ( Addressable x0,  Addressable x1) {
        var mh$ = __mingw_vprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __mingw_vsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$3.__mingw_vsprintf$MH,"__mingw_vsprintf");
    }
    public static int __mingw_vsprintf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = __mingw_vsprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __mingw_vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.__mingw_vsnprintf$MH,"__mingw_vsnprintf");
    }
    public static int __mingw_vsnprintf ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = __mingw_vsnprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mingw_output_format_control$MH() {
        return RuntimeHelper.requireNonNull(constants$4._mingw_output_format_control$MH,"_mingw_output_format_control");
    }
    public static int _mingw_output_format_control ( int x0,  int x1) {
        var mh$ = _mingw_output_format_control$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.fprintf$MH,"fprintf");
    }
    public static int fprintf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = fprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle printf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.printf$MH,"printf");
    }
    public static int printf ( Addressable x0, Object... x1) {
        var mh$ = printf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.sprintf$MH,"sprintf");
    }
    public static int sprintf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = sprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.vfprintf$MH,"vfprintf");
    }
    public static int vfprintf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = vfprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.vprintf$MH,"vprintf");
    }
    public static int vprintf ( Addressable x0,  Addressable x1) {
        var mh$ = vprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.vsprintf$MH,"vsprintf");
    }
    public static int vsprintf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = vsprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __msvcrt_fprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.__msvcrt_fprintf$MH,"__msvcrt_fprintf");
    }
    public static int __msvcrt_fprintf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = __msvcrt_fprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __msvcrt_printf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.__msvcrt_printf$MH,"__msvcrt_printf");
    }
    public static int __msvcrt_printf ( Addressable x0, Object... x1) {
        var mh$ = __msvcrt_printf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __msvcrt_sprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.__msvcrt_sprintf$MH,"__msvcrt_sprintf");
    }
    public static int __msvcrt_sprintf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = __msvcrt_sprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __msvcrt_vfprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.__msvcrt_vfprintf$MH,"__msvcrt_vfprintf");
    }
    public static int __msvcrt_vfprintf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = __msvcrt_vfprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __msvcrt_vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.__msvcrt_vprintf$MH,"__msvcrt_vprintf");
    }
    public static int __msvcrt_vprintf ( Addressable x0,  Addressable x1) {
        var mh$ = __msvcrt_vprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __msvcrt_vsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.__msvcrt_vsprintf$MH,"__msvcrt_vsprintf");
    }
    public static int __msvcrt_vsprintf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = __msvcrt_vsprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$6._snprintf$MH,"_snprintf");
    }
    public static int _snprintf ( Addressable x0,  long x1,  Addressable x2, Object... x3) {
        var mh$ = _snprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$6._vsnprintf$MH,"_vsnprintf");
    }
    public static int _vsnprintf ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = _vsnprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _vscprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$6._vscprintf$MH,"_vscprintf");
    }
    public static int _vscprintf ( Addressable x0,  Addressable x1) {
        var mh$ = _vscprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.snprintf$MH,"snprintf");
    }
    public static int snprintf ( Addressable x0,  long x1,  Addressable x2, Object... x3) {
        var mh$ = snprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.vsnprintf$MH,"vsnprintf");
    }
    public static int vsnprintf ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = vsnprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.vscanf$MH,"vscanf");
    }
    public static int vscanf ( Addressable x0,  Addressable x1) {
        var mh$ = vscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.vfscanf$MH,"vfscanf");
    }
    public static int vfscanf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = vfscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.vsscanf$MH,"vsscanf");
    }
    public static int vsscanf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = vsscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$7.getdelim$MH,"getdelim");
    }
    public static int getdelim ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = getdelim$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getline$MH() {
        return RuntimeHelper.requireNonNull(constants$7.getline$MH,"getline");
    }
    public static int getline ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = getline$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fscanf$MH,"fscanf");
    }
    public static int fscanf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = fscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scanf$MH() {
        return RuntimeHelper.requireNonNull(constants$8.scanf$MH,"scanf");
    }
    public static int scanf ( Addressable x0, Object... x1) {
        var mh$ = scanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$8.sscanf$MH,"sscanf");
    }
    public static int sscanf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = sscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fgetc$MH,"fgetc");
    }
    public static int fgetc ( Addressable x0) {
        var mh$ = fgetc$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgets$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fgets$MH,"fgets");
    }
    public static MemoryAddress fgets ( Addressable x0,  int x1,  Addressable x2) {
        var mh$ = fgets$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fputc$MH,"fputc");
    }
    public static int fputc ( int x0,  Addressable x1) {
        var mh$ = fputc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputs$MH() {
        return RuntimeHelper.requireNonNull(constants$9.fputs$MH,"fputs");
    }
    public static int fputs ( Addressable x0,  Addressable x1) {
        var mh$ = fputs$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gets$MH() {
        return RuntimeHelper.requireNonNull(constants$9.gets$MH,"gets");
    }
    public static MemoryAddress gets ( Addressable x0) {
        var mh$ = gets$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle puts$MH() {
        return RuntimeHelper.requireNonNull(constants$9.puts$MH,"puts");
    }
    public static int puts ( Addressable x0) {
        var mh$ = puts$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetc$MH() {
        return RuntimeHelper.requireNonNull(constants$9.ungetc$MH,"ungetc");
    }
    public static int ungetc ( int x0,  Addressable x1) {
        var mh$ = ungetc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _filbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$9._filbuf$MH,"_filbuf");
    }
    public static int _filbuf ( Addressable x0) {
        var mh$ = _filbuf$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _flsbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$9._flsbuf$MH,"_flsbuf");
    }
    public static int _flsbuf ( int x0,  Addressable x1) {
        var mh$ = _flsbuf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc$MH() {
        return RuntimeHelper.requireNonNull(constants$10.getc$MH,"getc");
    }
    public static int getc ( Addressable x0) {
        var mh$ = getc$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc$MH() {
        return RuntimeHelper.requireNonNull(constants$10.putc$MH,"putc");
    }
    public static int putc ( int x0,  Addressable x1) {
        var mh$ = putc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar$MH() {
        return RuntimeHelper.requireNonNull(constants$10.getchar$MH,"getchar");
    }
    public static int getchar () {
        var mh$ = getchar$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar$MH() {
        return RuntimeHelper.requireNonNull(constants$10.putchar$MH,"putchar");
    }
    public static int putchar ( int x0) {
        var mh$ = putchar$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread$MH() {
        return RuntimeHelper.requireNonNull(constants$10.fread$MH,"fread");
    }
    public static long fread ( Addressable x0,  long x1,  long x2,  Addressable x3) {
        var mh$ = fread$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$10.fwrite$MH,"fwrite");
    }
    public static long fwrite ( Addressable x0,  long x1,  long x2,  Addressable x3) {
        var mh$ = fwrite$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseek$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fseek$MH,"fseek");
    }
    public static int fseek ( Addressable x0,  int x1,  int x2) {
        var mh$ = fseek$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftell$MH() {
        return RuntimeHelper.requireNonNull(constants$11.ftell$MH,"ftell");
    }
    public static int ftell ( Addressable x0) {
        var mh$ = ftell$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rewind$MH() {
        return RuntimeHelper.requireNonNull(constants$11.rewind$MH,"rewind");
    }
    public static void rewind ( Addressable x0) {
        var mh$ = rewind$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt fpos_t = Constants$root.C_LONG$LAYOUT;
    public static MethodHandle fgetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fgetpos$MH,"fgetpos");
    }
    public static int fgetpos ( Addressable x0,  Addressable x1) {
        var mh$ = fgetpos$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fsetpos$MH,"fsetpos");
    }
    public static int fsetpos ( Addressable x0,  Addressable x1) {
        var mh$ = fsetpos$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof$MH() {
        return RuntimeHelper.requireNonNull(constants$11.feof$MH,"feof");
    }
    public static int feof ( Addressable x0) {
        var mh$ = feof$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror$MH() {
        return RuntimeHelper.requireNonNull(constants$12.ferror$MH,"ferror");
    }
    public static int ferror ( Addressable x0) {
        var mh$ = ferror$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearerr$MH() {
        return RuntimeHelper.requireNonNull(constants$12.clearerr$MH,"clearerr");
    }
    public static void clearerr ( Addressable x0) {
        var mh$ = clearerr$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle perror$MH() {
        return RuntimeHelper.requireNonNull(constants$12.perror$MH,"perror");
    }
    public static void perror ( Addressable x0) {
        var mh$ = perror$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _popen$MH() {
        return RuntimeHelper.requireNonNull(constants$12._popen$MH,"_popen");
    }
    public static MemoryAddress _popen ( Addressable x0,  Addressable x1) {
        var mh$ = _popen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _pclose$MH() {
        return RuntimeHelper.requireNonNull(constants$12._pclose$MH,"_pclose");
    }
    public static int _pclose ( Addressable x0) {
        var mh$ = _pclose$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle popen$MH() {
        return RuntimeHelper.requireNonNull(constants$12.popen$MH,"popen");
    }
    public static MemoryAddress popen ( Addressable x0,  Addressable x1) {
        var mh$ = popen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pclose$MH() {
        return RuntimeHelper.requireNonNull(constants$13.pclose$MH,"pclose");
    }
    public static int pclose ( Addressable x0) {
        var mh$ = pclose$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _flushall$MH() {
        return RuntimeHelper.requireNonNull(constants$13._flushall$MH,"_flushall");
    }
    public static int _flushall () {
        var mh$ = _flushall$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fgetchar$MH() {
        return RuntimeHelper.requireNonNull(constants$13._fgetchar$MH,"_fgetchar");
    }
    public static int _fgetchar () {
        var mh$ = _fgetchar$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fputchar$MH() {
        return RuntimeHelper.requireNonNull(constants$13._fputchar$MH,"_fputchar");
    }
    public static int _fputchar ( int x0) {
        var mh$ = _fputchar$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$13._fdopen$MH,"_fdopen");
    }
    public static MemoryAddress _fdopen ( int x0,  Addressable x1) {
        var mh$ = _fdopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fileno$MH() {
        return RuntimeHelper.requireNonNull(constants$13._fileno$MH,"_fileno");
    }
    public static int _fileno ( Addressable x0) {
        var mh$ = _fileno$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fcloseall$MH() {
        return RuntimeHelper.requireNonNull(constants$14._fcloseall$MH,"_fcloseall");
    }
    public static int _fcloseall () {
        var mh$ = _fcloseall$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fsopen$MH() {
        return RuntimeHelper.requireNonNull(constants$14._fsopen$MH,"_fsopen");
    }
    public static MemoryAddress _fsopen ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = _fsopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __mingw_get_output_format$MH() {
        return RuntimeHelper.requireNonNull(constants$14.__mingw_get_output_format$MH,"__mingw_get_output_format");
    }
    public static int __mingw_get_output_format () {
        var mh$ = __mingw_get_output_format$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __mingw_set_output_format$MH() {
        return RuntimeHelper.requireNonNull(constants$14.__mingw_set_output_format$MH,"__mingw_set_output_format");
    }
    public static int __mingw_set_output_format ( int x0) {
        var mh$ = __mingw_set_output_format$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __mingw_get_printf_count_output$MH() {
        return RuntimeHelper.requireNonNull(constants$14.__mingw_get_printf_count_output$MH,"__mingw_get_printf_count_output");
    }
    public static int __mingw_get_printf_count_output () {
        var mh$ = __mingw_get_printf_count_output$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __mingw_set_printf_count_output$MH() {
        return RuntimeHelper.requireNonNull(constants$14.__mingw_set_printf_count_output$MH,"__mingw_set_printf_count_output");
    }
    public static int __mingw_set_printf_count_output ( int x0) {
        var mh$ = __mingw_set_printf_count_output$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_output_format$MH() {
        return RuntimeHelper.requireNonNull(constants$15._get_output_format$MH,"_get_output_format");
    }
    public static int _get_output_format () {
        var mh$ = _get_output_format$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_output_format$MH() {
        return RuntimeHelper.requireNonNull(constants$15._set_output_format$MH,"_set_output_format");
    }
    public static int _set_output_format ( int __style) {
        var mh$ = _set_output_format$MH();
        try {
            return (int)mh$.invokeExact(__style);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_printf_count_output$MH() {
        return RuntimeHelper.requireNonNull(constants$15._get_printf_count_output$MH,"_get_printf_count_output");
    }
    public static int _get_printf_count_output () {
        var mh$ = _get_printf_count_output$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_printf_count_output$MH() {
        return RuntimeHelper.requireNonNull(constants$15._set_printf_count_output$MH,"_set_printf_count_output");
    }
    public static int _set_printf_count_output ( int __mode) {
        var mh$ = _set_printf_count_output$MH();
        try {
            return (int)mh$.invokeExact(__mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetchar$MH() {
        return RuntimeHelper.requireNonNull(constants$15.fgetchar$MH,"fgetchar");
    }
    public static int fgetchar () {
        var mh$ = fgetchar$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputchar$MH() {
        return RuntimeHelper.requireNonNull(constants$15.fputchar$MH,"fputchar");
    }
    public static int fputchar ( int x0) {
        var mh$ = fputchar$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$16.fdopen$MH,"fdopen");
    }
    public static MemoryAddress fdopen ( int x0,  Addressable x1) {
        var mh$ = fdopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno$MH() {
        return RuntimeHelper.requireNonNull(constants$16.fileno$MH,"fileno");
    }
    public static int fileno ( Addressable x0) {
        var mh$ = fileno$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$16.fwprintf$MH,"fwprintf");
    }
    public static int fwprintf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = fwprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$16.wprintf$MH,"wprintf");
    }
    public static int wprintf ( Addressable x0, Object... x1) {
        var mh$ = wprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfwprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$16.vfwprintf$MH,"vfwprintf");
    }
    public static int vfwprintf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = vfwprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vwprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$16.vwprintf$MH,"vwprintf");
    }
    public static int vwprintf ( Addressable x0,  Addressable x1) {
        var mh$ = vwprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _snwprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$17._snwprintf$MH,"_snwprintf");
    }
    public static int _snwprintf ( Addressable x0,  long x1,  Addressable x2, Object... x3) {
        var mh$ = _snwprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _vscwprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$17._vscwprintf$MH,"_vscwprintf");
    }
    public static int _vscwprintf ( Addressable x0,  Addressable x1) {
        var mh$ = _vscwprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _vsnwprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$17._vsnwprintf$MH,"_vsnwprintf");
    }
    public static int _vsnwprintf ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = _vsnwprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$17.fwscanf$MH,"fwscanf");
    }
    public static int fwscanf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = fwscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$17.wscanf$MH,"wscanf");
    }
    public static int wscanf ( Addressable x0, Object... x1) {
        var mh$ = wscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle swscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$17.swscanf$MH,"swscanf");
    }
    public static int swscanf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = swscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetwc$MH() {
        return RuntimeHelper.requireNonNull(constants$18.fgetwc$MH,"fgetwc");
    }
    public static short fgetwc ( Addressable x0) {
        var mh$ = fgetwc$MH();
        try {
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputwc$MH() {
        return RuntimeHelper.requireNonNull(constants$18.fputwc$MH,"fputwc");
    }
    public static short fputwc ( short x0,  Addressable x1) {
        var mh$ = fputwc$MH();
        try {
            return (short)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetwc$MH() {
        return RuntimeHelper.requireNonNull(constants$18.ungetwc$MH,"ungetwc");
    }
    public static short ungetwc ( short x0,  Addressable x1) {
        var mh$ = ungetwc$MH();
        try {
            return (short)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle swprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$18.swprintf$MH,"swprintf");
    }
    public static int swprintf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = swprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vswprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$18.vswprintf$MH,"vswprintf");
    }
    public static int vswprintf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = vswprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle snwprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$18.snwprintf$MH,"snwprintf");
    }
    public static int snwprintf ( Addressable x0,  long x1,  Addressable x2, Object... x3) {
        var mh$ = snwprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsnwprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$19.vsnwprintf$MH,"vsnwprintf");
    }
    public static int vsnwprintf ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = vsnwprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vwscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$19.vwscanf$MH,"vwscanf");
    }
    public static int vwscanf ( Addressable x0,  Addressable x1) {
        var mh$ = vwscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfwscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$19.vfwscanf$MH,"vfwscanf");
    }
    public static int vfwscanf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = vfwscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vswscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$19.vswscanf$MH,"vswscanf");
    }
    public static int vswscanf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = vswscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fgetwchar$MH() {
        return RuntimeHelper.requireNonNull(constants$19._fgetwchar$MH,"_fgetwchar");
    }
    public static short _fgetwchar () {
        var mh$ = _fgetwchar$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _fputwchar$MH() {
        return RuntimeHelper.requireNonNull(constants$19._fputwchar$MH,"_fputwchar");
    }
    public static short _fputwchar ( short x0) {
        var mh$ = _fputwchar$MH();
        try {
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _getw$MH() {
        return RuntimeHelper.requireNonNull(constants$20._getw$MH,"_getw");
    }
    public static int _getw ( Addressable x0) {
        var mh$ = _getw$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _putw$MH() {
        return RuntimeHelper.requireNonNull(constants$20._putw$MH,"_putw");
    }
    public static int _putw ( int x0,  Addressable x1) {
        var mh$ = _putw$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetwchar$MH() {
        return RuntimeHelper.requireNonNull(constants$20.fgetwchar$MH,"fgetwchar");
    }
    public static short fgetwchar () {
        var mh$ = fgetwchar$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputwchar$MH() {
        return RuntimeHelper.requireNonNull(constants$20.fputwchar$MH,"fputwchar");
    }
    public static short fputwchar ( short x0) {
        var mh$ = fputwchar$MH();
        try {
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getw$MH() {
        return RuntimeHelper.requireNonNull(constants$20.getw$MH,"getw");
    }
    public static int getw ( Addressable x0) {
        var mh$ = getw$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putw$MH() {
        return RuntimeHelper.requireNonNull(constants$20.putw$MH,"putw");
    }
    public static int putw ( int x0,  Addressable x1) {
        var mh$ = putw$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int __MINGW32_VERSION() {
        return (int)5000002L;
    }
    public static int __MSVCRT_VERSION__() {
        return (int)1536L;
    }
    public static int __W32API_VERSION() {
        return (int)5000002L;
    }
    public static int OSVERSION_MASK() {
        return (int)4294901760L;
    }
    public static int NTDDI_WIN2K() {
        return (int)83886080L;
    }
    public static int NTDDI_WIN2KSP1() {
        return (int)83886336L;
    }
    public static int NTDDI_WIN2KSP2() {
        return (int)83886592L;
    }
    public static int NTDDI_WIN2KSP3() {
        return (int)83886848L;
    }
    public static int NTDDI_WIN2KSP4() {
        return (int)83887104L;
    }
    public static int NTDDI_WINXP() {
        return (int)83951616L;
    }
    public static int NTDDI_WINXPSP1() {
        return (int)83951872L;
    }
    public static int NTDDI_WINXPSP2() {
        return (int)83952128L;
    }
    public static int NTDDI_WINXPSP3() {
        return (int)83952384L;
    }
    public static int NTDDI_WS03() {
        return (int)84017152L;
    }
    public static int NTDDI_WS03SP1() {
        return (int)84017408L;
    }
    public static int NTDDI_WS03SP2() {
        return (int)84017664L;
    }
    public static int NTDDI_VISTA() {
        return (int)100663296L;
    }
    public static int NTDDI_VISTASP1() {
        return (int)100663552L;
    }
    public static int NTDDI_VISTASP2() {
        return (int)100663808L;
    }
    public static int NTDDI_LONGHORN() {
        return (int)100663296L;
    }
    public static int NTDDI_WIN6() {
        return (int)100663296L;
    }
    public static int NTDDI_WIN6SP1() {
        return (int)100663552L;
    }
    public static int NTDDI_WIN6SP2() {
        return (int)100663808L;
    }
    public static int NTDDI_WS08() {
        return (int)100663552L;
    }
    public static int NTDDI_WIN7() {
        return (int)100728832L;
    }
    public static int NTDDI_WIN8() {
        return (int)100794368L;
    }
    public static int NTDDI_WINBLUE() {
        return (int)100859904L;
    }
    public static int _WIN32_WINNT() {
        return (int)1280L;
    }
    public static int WINVER() {
        return (int)1280L;
    }
    public static int NTDDI_VERSION() {
        return (int)83886080L;
    }
    public static int Windows95() {
        return (int)1024L;
    }
    public static int Windows98() {
        return (int)1040L;
    }
    public static int WindowsME() {
        return (int)1168L;
    }
    public static int WindowsNT4() {
        return (int)1024L;
    }
    public static int Windows2000() {
        return (int)1280L;
    }
    public static int WindowsXP() {
        return (int)1281L;
    }
    public static int Windows2003() {
        return (int)1282L;
    }
    public static int WindowsVista() {
        return (int)1536L;
    }
    public static int IE3() {
        return (int)768L;
    }
    public static int IE301() {
        return (int)769L;
    }
    public static int IE302() {
        return (int)770L;
    }
    public static int IE4() {
        return (int)1024L;
    }
    public static int IE401() {
        return (int)1025L;
    }
    public static int IE5() {
        return (int)1280L;
    }
    public static int IE5a() {
        return (int)1280L;
    }
    public static int IE5b() {
        return (int)1280L;
    }
    public static int IE501() {
        return (int)1281L;
    }
    public static int IE55() {
        return (int)1360L;
    }
    public static int IE56() {
        return (int)1376L;
    }
    public static int IE6() {
        return (int)1536L;
    }
    public static int IE601() {
        return (int)1537L;
    }
    public static int IE602() {
        return (int)1539L;
    }
    public static int IE7() {
        return (int)1792L;
    }
    public static byte __CRT_GLOB_ESCAPE_CHAR__() {
        return (byte)127L;
    }
    public static long __MINGW_ANSI_STDIO__() {
        return 1L;
    }
    public static long __MINGW_LC_EXTENSIONS__() {
        return 80L;
    }
    public static long __MINGW_LC_MESSAGES__() {
        return 16L;
    }
    public static long __MINGW_LC_ENVVARS__() {
        return 64L;
    }
    public static int _POSIX_C_SOURCE() {
        return (int)200809L;
    }
    public static MemoryAddress NULL() {
        return constants$21.NULL$ADDR;
    }
    public static int EOF() {
        return (int)-1L;
    }
    public static int FILENAME_MAX() {
        return (int)260L;
    }
    public static int FOPEN_MAX() {
        return (int)20L;
    }
    public static MemorySegment _P_tmpdir() {
        return constants$21._P_tmpdir$SEGMENT;
    }
    public static MemorySegment P_tmpdir() {
        return constants$21.P_tmpdir$SEGMENT;
    }
    public static MemorySegment _wP_tmpdir() {
        return constants$21._wP_tmpdir$SEGMENT;
    }
    public static int L_tmpnam() {
        return (int)16L;
    }
    public static int _MSVC_PRINTF_QUIRKS() {
        return (int)256L;
    }
    public static int _QUERY_MSVC_PRINTF_QUIRKS() {
        return (int)4294967295L;
    }
    public static int _DISABLE_MSVC_PRINTF_QUIRKS() {
        return (int)4294967039L;
    }
    public static int _ENABLE_MSVC_PRINTF_QUIRKS() {
        return (int)4294967295L;
    }
    public static int _EXPONENT_DIGIT_MASK() {
        return (int)1L;
    }
}


